<project name="build" default="compile">
  <description>
  	The basic build file for the GrammarViz system.
  </description>

  <!-- Always make environment variables available with the "env." prefix. -->
  <property environment="env" />

  <!-- Make sure we're running a Java 5 or better. -->
  <condition property="java.7.available">
    <or>
      <contains string="${java.version}" substring="1.7" />
      <contains string="${java.version}" substring="1.8" />
    </or>
  </condition>
  <fail message="This package requires Java 7+." unless="java.7.available" />

  <!-- Make sure we're running Ant 1.8. -->
  <condition property="ant.1.8.available">
    <contains string="${ant.version}" substring="1.8" />
  </condition>
  <condition property="ant.available" value="yes">
    <isset property="ant.1.8.available" />
  </condition>
  <fail message="This package requires Ant 1.8." unless="ant.available" />

  <!-- Basic properties for this system. -->
  <property name="system.name" value="grammarviz" />
  <property name="majorVersionNumber" value="2" />
  <property name="minorVersionNumber" value="0" />
  <tstamp>
    <format property="DAYSTAMP" pattern="Mdd" />
  </tstamp>
  <property name="version" value="${majorVersionNumber}.${minorVersionNumber}.${DAYSTAMP}" />

  <!-- Basic directory structure. -->
  <property name="src.dir" location="${basedir}/src" />
  <property name="lib.dir" location="${basedir}/lib" />
  <property name="build.dir" location="${basedir}/build" />


  <!-- The compile classpath  -->
  <path id="compile.classpath">
    <fileset file="${env.JUNIT_HOME}/junit-${junit.version}.jar" />
    <fileset file="${lib.dir}/DTW/fast-dtw.jar" />
    <fileset dir="${lib.dir}/JFreeChart" />
    <fileset dir="${lib.dir}/time" />
    <fileset dir="${lib.dir}/logger" />
  </path>

  <path id="classpath.test">
    <pathelement location="lib/junit-4.11.jar" />
    <pathelement location="lib/hamcrest-core-1.3.jar" />
    <pathelement location="${main.build.dir}" />
    <path refid="classpath.base" />
  </path>

  <target name="test" depends="compile" description="Run JUnit tests.">

    <mkdir dir="${junit.dir}" />
    <!-- Run the tests, which are all classes whose name starts with 'Test'. -->
    <!-- Fork is on until I can figure out how to stop the sensorbase and unbind the port. -->
    <!-- Note that emma is forking in its JUnit as well. -->
    <junit printsummary="withOutAndErr" haltonfailure="${junit.haltonfailure}" fork="yes" failureproperty="junit.failed">
      <classpath>
        <pathelement location="${build.dir}/classes" />
        <path refid="classpath.test" />
      </classpath>
      <sysproperty key="user.dir" value="${basedir}" />
      <formatter type="xml" />
      <batchtest todir="${junit.dir}">
        <fileset dir="${src.dir}" includes="**/Test*.java" />
      </batchtest>
    </junit>
  </target>


  <target name="compile" description="Compiles the code.">
    <!-- Now compile the code into build/classes -->
    <mkdir dir="${build.dir}/classes" />
    <javac srcdir="${src.dir}" destdir="${build.dir}/classes" source="1.7" target="1.7" debug="on" includeAntRuntime="no">
      <classpath refid="compile.classpath" />
      <compilerarg value="-Xlint:all" />
      <!-- <compilerarg value="-Werror" /> -->
    </javac>
  </target>

  <target name="clean" description="Delete build/ directory and top-level jar files.">
    <delete>
      <fileset dir="${basedir}" includes="*.jar" />
    </delete>
    <delete dir="${build.dir}" />
    <delete dir="${basedir}/sandbox" />
  </target>

  <target name="convertLineEndings" description="Makes line endings compatible with host platform.">
    <fixcrlf srcdir="${basedir}" includes="*.build.xml" />
  </target>

</project>
